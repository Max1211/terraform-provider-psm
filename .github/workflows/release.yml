name: Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
permissions:
  contents: write
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    environment: tf_provider_psm
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: '.go-version'
          check-latest: true

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      # Remove the "Prepare Terraform Registry manifest" step that was creating the file

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Get release ID
        id: get_release
        run: |
          # Wait a moment for the release to be created
          sleep 10
          # Fetch the release ID more reliably
          release_json=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}")
          
          echo "Release JSON: $release_json" # For debugging
          
          RELEASE_ID=$(echo "$release_json" | jq -r '.id')
          
          if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "Failed to get release ID. GitHub API response:"
            echo "$release_json"
            exit 1
          fi
          
          echo "Found release ID: $RELEASE_ID"
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
          
          # Get the upload URL for assets
          UPLOAD_URL=$(echo "$release_json" | jq -r '.upload_url')
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

      - name: Copy and rename manifest file
        run: cp terraform-registry-manifest.json ${{ github.event.repository.name }}_${{ github.ref_name }}_manifest.json

      - name: Upload manifest to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ${{ github.event.repository.name }}_${{ github.ref_name }}_manifest.json
          asset_name: ${{ github.event.repository.name }}_${{ github.ref_name }}_manifest.json
          asset_content_type: application/json

  release-notes:
    runs-on: ubuntu-latest
    environment: tf_provider_psm
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate Release Notes
        run: |
          if [ -f CHANGELOG.md ]; then
            export PREV_TAG=$(git tag --list 'v*' --sort=-version:refname | head -n 2 | tail -n 1)
            export PREV_VERSION=${PREV_TAG//v}
            sed -n -e "1{/# /d;}" -e "2{/^$/d;}" -e "/# $PREV_VERSION/q;p" CHANGELOG.md > release-notes.txt
          else
            echo "Release version: ${{ github.ref_name }}" > release-notes.txt
            git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))..HEAD >> release-notes.txt
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.txt
          retention-days: 1