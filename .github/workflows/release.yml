name: Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    environment: tf_provider_psm
    steps:
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual dispatch - use input
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Tag push - extract from ref
            TAG=${GITHUB_REF#refs/tags/}
            echo "VERSION=${TAG#v}" >> $GITHUB_OUTPUT
            echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          fi
          echo "Using version: ${{ steps.version.outputs.VERSION }}"
          echo "Using tag: ${{ steps.version.outputs.TAG }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Debug Git Information
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "Release tag: ${{ steps.version.outputs.TAG }}"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "All tags on this commit:"
          git tag --points-at HEAD
          echo "All tags in repository:"
          git tag -l

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: '.go-version'
          check-latest: true

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      # Create terraform-registry-manifest.json
      - name: Prepare Terraform Registry manifest
        run: |
          cat > terraform-registry-manifest.json << EOF
          {
            "version": 1,
            "metadata": {
              "protocol_versions": ["5.0"]
            }
          }
          EOF

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # Force GoReleaser to use the specific tag
          GORELEASER_CURRENT_TAG: ${{ steps.version.outputs.TAG }}
          
  release-notes:
    runs-on: ubuntu-latest
    environment: tf_provider_psm
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Manual dispatch - use input
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Tag push - extract from ref
            TAG=${GITHUB_REF#refs/tags/}
            echo "VERSION=${TAG#v}" >> $GITHUB_OUTPUT
            echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate Release Notes
        run: |
          if [ -f CHANGELOG.md ]; then
            export PREV_TAG=$(git tag --list 'v*' --sort=-version:refname | head -n 2 | tail -n 1)
            export PREV_VERSION=${PREV_TAG//v}
            sed -n -e "1{/# /d;}" -e "2{/^$/d;}" -e "/# $PREV_VERSION/q;p" CHANGELOG.md > release-notes.txt
          else
            echo "Release version: ${{ steps.version.outputs.TAG }}" > release-notes.txt
            git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))..HEAD >> release-notes.txt
          fi
          
      - uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.txt
          retention-days: 1